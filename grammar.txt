HaHaPuShi Grammar 

Prog -> main
main -> INT "main" "(" ")" "{" stmts ret "}"
stmts -> stmt | stmt stmts
stmt -> ifelse_stmt | 
		for_loop |
		while_loop |
		var_dec |
              var_assgn |
		exp_stmt |
		print_stmt |
		ret 

ifelse_stmt -> IF "(" relop_exp ")" "{" stmts "}" | 
			IF "(" relop_exp ")" "{" stmts "}" else_stmt

else_stmt -> "ELSE" "{" stmts "}" | "ELSE" stmt

for_loop -> FOR "(" var_dec ";" relop_exp ";" exp ")" "{" stmts "}"

while_loop -> WHILE "(" relop_exp ")" "{" stmts "}"

id_chain -> ID | ID "," id_chain

var_dec -> TYPE VAR "=" exp_stmt |
            TYPE VAR ";" |
            ARRAY "(" TYPE, id ")" VAR ";" | 
            ARRAY "(" TYPE, ID ")" VAR "=" "{" id_chain "}" ";" 

var_assgn ->  VAR "=" exp_stmt |
              


exp_stmt -> exp ";"

(note: relop_exp is made separate because they will always have a truth value associated)
relop_exp -> exp ">" exp |
             exp "<" exp |
             exp "==" exp |
             exp "<=" exp |
             exp ">=" exp |
             exp "!=" exp |
             exp AND exp |
             exp OR exp |
             exp XOR exp |
             relop_exp AND relop_exp |
             relop_exp OR relop_exp |
             relop_exp XOR relop_exp

exp -> exp "+" exp |
       exp "-" exp |
       exp "*" exp |
       exp "/" exp |
       exp "^" exp |
       exp "%" exp |
       exp "&" exp |
       exp "|" exp |
       "( exp ")" |
       "-" exp |
       id

print_stmt -> PRINT "(" FORMAT ")"

id -> var | 
      NUM

var -> VAR | 
       VAR"[" id "]"

------------------- NOTES -------------------
id means I want either a number or a declared variable



-------------------------- NOT SURE -------------------------------
prog -> fucns main | main

funcs -> func | func funcs

func -> "func" TYPE VAR "{" stmts ret "}"